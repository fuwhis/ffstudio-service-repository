// <auto-generated />
using System;
using EntityModel.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EntityModel.Migrations
{
    [DbContext(typeof(PostgreContext))]
    [Migration("20220421181036_v0")]
    partial class v0
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EntityModel.Models.Account", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Info")
                        .HasColumnType("json");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("EntityModel.Models.Bill", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<long?>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("Customer_Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discount_Id")
                        .HasColumnType("text");

                    b.Property<string>("Info")
                        .HasColumnType("json");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("Vat")
                        .HasColumnType("bigint");

                    b.HasKey("Uid");

                    b.ToTable("bills");
                });

            modelBuilder.Entity("EntityModel.Models.Customer", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Info")
                        .HasColumnType("json");

                    b.Property<string>("License_plate")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Phone_Number")
                        .HasColumnType("integer");

                    b.Property<string>("Ref_Name")
                        .HasColumnType("text");

                    b.Property<int?>("Ref_Phone_Number")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Updated_Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Uid");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("EntityModel.Models.Discount", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<string>("Campaign_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Discount_Value")
                        .HasColumnType("integer");

                    b.Property<string>("Info")
                        .HasColumnType("json");

                    b.Property<DateTime>("Updated_Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Uid");

                    b.ToTable("discounts");
                });

            modelBuilder.Entity("EntityModel.Models.Product", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float?>("Import_Price")
                        .HasColumnType("real");

                    b.Property<string>("Info")
                        .HasColumnType("json");

                    b.Property<string>("Product_Code")
                        .HasColumnType("text");

                    b.Property<string>("Product_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<float?>("Sale_Price")
                        .HasColumnType("real");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated_Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Uid");

                    b.ToTable("products");
                });
#pragma warning restore 612, 618
        }
    }
}
